@page "/weatheranalysis"
@using System.Text.Json
@inject ILogger<WeatherAnalysis> Logger

<PageTitle>Weather Analysis</PageTitle>

<div class="container-fluid">
    <h1 class="mb-4">Weather Temperature Analysis</h1>

    @if (isLoading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            <h4 class="alert-heading">Error!</h4>
            <p>@errorMessage</p>
            <button class="btn btn-outline-danger" @onclick="LoadDataAsync">
                <i class="bi bi-arrow-clockwise"></i> Retry
            </button>
        </div>
    }
    else
    {
        <!-- Historical Data Analysis Table -->
        <div class="card mb-4">
            <div class="card-header">
                <h3 class="card-title mb-0">Historical Temperature Analysis (All Cities)</h3>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>City</th>
                                <th>Jan</th>
                                <th>Feb</th>
                                <th>Mar</th>
                                <th>Apr</th>
                                <th>May</th>
                                <th>Jun</th>
                                <th>Jul</th>
                                <th>Aug</th>
                                <th>Sep</th>
                                <th>Oct</th>
                                <th>Nov</th>
                                <th>Dec</th>
                                <th>Year Avg</th>
                                <th>Highest</th>
                                <th>Lowest</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (citiesAnalysis != null)
                            {
                                @foreach (var city in citiesAnalysis)
                                {
                                    <tr class="@(city.City == "Amsterdam" ? "table-warning" : "")">
                                        <td class="fw-bold">@city.City</td>
                                        @for (int i = 0; i < 12; i++)
                                        {
                                            var temp = city.MonthlyTemperatures[i];
                                            var cellClass = GetTemperatureCellClass(temp);
                                            <td class="@cellClass">@temp.ToString("F1")°C</td>
                                        }
                                        <td class="fw-bold">@city.AverageTemperature.ToString("F1")°C</td>
                                        <td class="text-danger fw-bold">
                                            @city.HighestTemperature.ToString("F1")°C
                                            <small class="text-muted d-block">(@GetMonthName(city.HighestTemperatureMonth))</small>
                                        </td>
                                        <td class="text-primary fw-bold">
                                            @city.LowestTemperature.ToString("F1")°C
                                            <small class="text-muted d-block">(@GetMonthName(city.LowestTemperatureMonth))</small>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Amsterdam Current vs Historical Comparison -->
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h3 class="card-title mb-0">Amsterdam: Current vs Historical Data</h3>
                <div>
                    <small class="text-muted">
                        Last updated: @(amsterdamComparison?.LastUpdated.ToString("MMM dd, yyyy HH:mm") ?? "N/A")
                    </small>
                    <button class="btn btn-sm btn-outline-primary ms-2" @onclick="RefreshAmsterdamData">
                        <i class="bi bi-arrow-clockwise"></i> Refresh
                    </button>
                </div>
            </div>
            <div class="card-body">
                @if (amsterdamComparison != null)
                {
                    <div class="row mb-3">
                        <div class="col-md-3">
                            <div class="card bg-info text-white">
                                <div class="card-body text-center">
                                    <h5 class="card-title">Current Temperature</h5>
                                    <h2>@amsterdamComparison.CurrentTemperature.ToString("F1")°C</h2>
                                    <small>@amsterdamComparison.WeatherDescription</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-secondary text-white">
                                <div class="card-body text-center">
                                    <h5 class="card-title">Historical Average</h5>
                                    <h2>@amsterdamComparison.HistoricalAverageTemperature.ToString("F1")°C</h2>
                                    <small>Year-round average</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card @(amsterdamComparison.AverageDifference >= 0 ? "bg-warning" : "bg-primary") text-white">
                                <div class="card-body text-center">
                                    <h5 class="card-title">Difference</h5>
                                    <h2>@(amsterdamComparison.AverageDifference >= 0 ? "+" : "")@amsterdamComparison.AverageDifference.ToString("F1")°C</h2>
                                    <small>vs historical avg</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-success text-white">
                                <div class="card-body text-center">
                                    <h5 class="card-title">Current Month</h5>
                                    <h2>@GetMonthName(DateTime.Now.Month)</h2>
                                    <small>Historical: @amsterdamComparison.HistoricalMonthlyTemperatures[DateTime.Now.Month - 1].ToString("F1")°C</small>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead class="table-dark">
                                <tr>
                                    <th>Metric</th>
                                    <th>Jan</th>
                                    <th>Feb</th>
                                    <th>Mar</th>
                                    <th>Apr</th>
                                    <th>May</th>
                                    <th>Jun</th>
                                    <th>Jul</th>
                                    <th>Aug</th>
                                    <th>Sep</th>
                                    <th>Oct</th>
                                    <th>Nov</th>
                                    <th>Dec</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr class="table-warning">
                                    <td class="fw-bold">Current Amsterdam</td>
                                    @for (int i = 0; i < 12; i++)
                                    {
                                        var isCurrentMonth = i == DateTime.Now.Month - 1;
                                        <td class="@(isCurrentMonth ? "bg-success text-white fw-bold" : "")">
                                            @(isCurrentMonth ? amsterdamComparison.CurrentTemperature.ToString("F1") : "-")
                                            @(isCurrentMonth ? "°C" : "")
                                        </td>
                                    }
                                </tr>
                                <tr>
                                    <td class="fw-bold">Historical Amsterdam Avg</td>
                                    @for (int i = 0; i < 12; i++)
                                    {
                                        <td>@amsterdamComparison.HistoricalMonthlyTemperatures[i].ToString("F1")°C</td>
                                    }
                                </tr>
                                <tr class="table-info">
                                    <td class="fw-bold">Difference (Current - Historical)</td>
                                    @for (int i = 0; i < 12; i++)
                                    {
                                        var diff = amsterdamComparison.MonthlyDifferences[i];
                                        var isCurrentMonth = i == DateTime.Now.Month - 1;
                                        var cellClass = isCurrentMonth ? (diff >= 0 ? "bg-warning text-dark fw-bold" : "bg-info text-white fw-bold") : 
                                                        (diff >= 0 ? "text-danger" : "text-primary");
                                        <td class="@cellClass">
                                            @(isCurrentMonth ? (diff >= 0 ? "+" : "") + diff.ToString("F1") + "°C" : "-")
                                        </td>
                                    }
                                </tr>
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="alert alert-warning">
                        <h4 class="alert-heading">Amsterdam Comparison Unavailable</h4>
                        <p>Unable to fetch current weather data for Amsterdam. This could be due to:</p>
                        <ul>
                            <li>API rate limits</li>
                            <li>Network connectivity issues</li>
                            <li>Weather service temporarily unavailable</li>
                        </ul>
                        <button class="btn btn-warning" @onclick="RefreshAmsterdamData">
                            <i class="bi bi-arrow-clockwise"></i> Try Again
                        </button>
                    </div>
                }
            </div>
        </div>

        <!-- Summary Statistics -->
        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h4 class="card-title mb-0">Warmest Cities (Annual Average)</h4>
                    </div>
                    <div class="card-body">
                        @if (citiesAnalysis != null)
                        {
                            var warmestCities = citiesAnalysis.OrderByDescending(c => c.AverageTemperature).Take(3);
                            <ol class="list-group list-group-numbered">
                                @foreach (var city in warmestCities)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-start">
                                        <div class="ms-2 me-auto">
                                            <div class="fw-bold">@city.City</div>
                                            Highest: @city.HighestTemperature.ToString("F1")°C in @GetMonthName(city.HighestTemperatureMonth)
                                        </div>
                                        <span class="badge bg-danger rounded-pill">@city.AverageTemperature.ToString("F1")°C</span>
                                    </li>
                                }
                            </ol>
                        }
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h4 class="card-title mb-0">Coldest Cities (Annual Average)</h4>
                    </div>
                    <div class="card-body">
                        @if (citiesAnalysis != null)
                        {
                            var coldestCities = citiesAnalysis.OrderBy(c => c.AverageTemperature).Take(3);
                            <ol class="list-group list-group-numbered">
                                @foreach (var city in coldestCities)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-start">
                                        <div class="ms-2 me-auto">
                                            <div class="fw-bold">@city.City</div>
                                            Lowest: @city.LowestTemperature.ToString("F1")°C in @GetMonthName(city.LowestTemperatureMonth)
                                        </div>
                                        <span class="badge bg-primary rounded-pill">@city.AverageTemperature.ToString("F1")°C</span>
                                    </li>
                                }
                            </ol>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<CityAnalysisDto>? citiesAnalysis;
    private WeatherComparisonDto? amsterdamComparison;
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged();

        using var httpClient = new HttpClient { BaseAddress = new Uri("https://localhost:7089/") };

        try
        {
            // Load historical data analysis
            var citiesResponse = await httpClient.GetAsync("api/weather/cities/analysis");
            if (citiesResponse.IsSuccessStatusCode)
            {
                var citiesJson = await citiesResponse.Content.ReadAsStringAsync();
                citiesAnalysis = JsonSerializer.Deserialize<List<CityAnalysisDto>>(citiesJson, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
            }

            // Load Amsterdam comparison
            var amsterdamResponse = await httpClient.GetAsync("api/weather/amsterdam/comparison");
            if (amsterdamResponse.IsSuccessStatusCode)
            {
                var amsterdamJson = await amsterdamResponse.Content.ReadAsStringAsync();
                amsterdamComparison = JsonSerializer.Deserialize<WeatherComparisonDto>(amsterdamJson, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading weather data");
            errorMessage = "Failed to load weather data.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshAmsterdamData()
    {
        using var httpClient = new HttpClient { BaseAddress = new Uri("https://localhost:7089/") };
        
        try
        {
            var amsterdamResponse = await httpClient.GetAsync("api/weather/amsterdam/comparison");
            if (amsterdamResponse.IsSuccessStatusCode)
            {
                var amsterdamJson = await amsterdamResponse.Content.ReadAsStringAsync();
                amsterdamComparison = JsonSerializer.Deserialize<WeatherComparisonDto>(amsterdamJson, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading Amsterdam comparison data");
            amsterdamComparison = null;
        }
        
        StateHasChanged();
    }

    private string GetMonthName(int month)
    {
        return month switch
        {
            1 => "Jan", 2 => "Feb", 3 => "Mar", 4 => "Apr",
            5 => "May", 6 => "Jun", 7 => "Jul", 8 => "Aug",
            9 => "Sep", 10 => "Oct", 11 => "Nov", 12 => "Dec",
            _ => "Unknown"
        };
    }

    private string GetTemperatureCellClass(double temperature)
    {
        return temperature switch
        {
            >= 25 => "bg-danger text-white",
            >= 20 => "bg-warning text-dark",
            >= 15 => "bg-success text-white",
            >= 10 => "bg-info text-white",
            >= 5 => "bg-light text-dark",
            >= 0 => "bg-secondary text-white",
            _ => "bg-primary text-white"
        };
    }

    // DTOs (copy these from your server project or reference them)
    public class CityAnalysisDto
    {
        public string City { get; set; } = string.Empty;
        public double[] MonthlyTemperatures { get; set; } = new double[12];
        public double AverageTemperature { get; set; }
        public double HighestTemperature { get; set; }
        public double LowestTemperature { get; set; }
        public int HighestTemperatureMonth { get; set; }
        public int LowestTemperatureMonth { get; set; }
    }

    public class WeatherComparisonDto
    {
        public string City { get; set; } = string.Empty;
        public double CurrentTemperature { get; set; }
        public double[] HistoricalMonthlyTemperatures { get; set; } = new double[12];
        public double HistoricalAverageTemperature { get; set; }
        public double[] MonthlyDifferences { get; set; } = new double[12];
        public double AverageDifference { get; set; }
        public DateTime LastUpdated { get; set; }
        public string WeatherDescription { get; set; } = string.Empty;
    }
}